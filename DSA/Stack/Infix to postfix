#User function Template for python3


class Solution:
    
    #Function to convert an infix expression to a postfix expression.
    
    def InfixtoPostfix(self, exp):
        #code here
        stack = []
        result = ''
        precedence = dict(zip(list('(+-*/^'), [1, 2, 2, 3, 3, 4]))
        for char in exp:
            if char in precedence.keys() or char == ')':
                if len(stack) == 0:
                    stack.append(char)
                else:
                    if char == '(':
                        stack.append(char)
                    elif char == '^' and stack[-1] == '^':
                        stack.append(char)
                    elif char == ')':
                        out_char = stack.pop()
                        while out_char != '(':
                            result += out_char
                            out_char = stack.pop()
                    elif precedence.get(char) == precedence.get(stack[-1]):
                        result += stack.pop()
                        stack.append(char)
                    elif precedence.get(char) > precedence.get(stack[-1]):
                        stack.append(char)
                    elif precedence.get(char) < precedence.get(stack[-1]):
                        while precedence.get(stack[-1]) >= precedence.get(char):
                            out_char = stack.pop()
                            result += out_char
                            if len(stack) == 0:
                                break
                        stack.append(char)
            else:
                result += char
        while len(stack) !=0:
            result += stack.pop()

        return result

#{ 
#  Driver Code Starts
#Initial Template for Python 3

import atexit
import io
import sys

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)


_INPUT_LINES = sys.stdin.read().splitlines()
input = iter(_INPUT_LINES).__next__
_OUTPUT_BUFFER = io.StringIO()
sys.stdout = _OUTPUT_BUFFER

@atexit.register

def write():
    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())


if __name__ == '__main__':
    test_cases = int(input())
    for cases in range(test_cases) :
        exp = str(input())
        ob=Solution()
        print(ob.InfixtoPostfix(exp))
# } Driver Code Ends
