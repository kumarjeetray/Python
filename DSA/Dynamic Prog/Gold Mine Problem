# User function Template for Python3

class Solution:
    def R_L(self,A,new_A,N,M):
       for i in range(N):
           new_A[i][M-1]=A[i][M-1]  # handle all edge cases
       for j in range(M-2,-1,-1):
           for i in range(N):
           
               if j+1<M: right = new_A[i][j+1]
               else: right = 0

               if i-1>=0 :right_up = new_A[i-1][j+1] 
               else: right_up = 0

               if i+1<N and j+1<M : right_down = new_A[i+1][j+1] 
               else : right_down=0

               new_A[i][j] = max(right, right_up, right_down) + A[i][j]
       return new_A
   
   
    def maxGold(self, N, M, A):
        new_A=[[0]*M for i in range(N)]
        maxi = -1 
        A = self.R_L(A,new_A,N,M)
        for i in A:
            maxi = max(maxi , i[0])
        return maxi


#{ 
 # Driver Code Starts
# Initial Template for Python3

if __name__ == '__main__':
    t = int(input())
    for _ in range(t):
        n, m = [int(x) for x in input().split()]
        tarr = [int(x) for x in input().split()]
        M = []
        j = 0
        for i in range (n):
            M.append(tarr[j:j + m])
            j = j+m
        
        ob = Solution()
        print(ob.maxGold(n, m, M))
# } Driver Code Ends
